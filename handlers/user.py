from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, FSInputFile, InputMediaPhoto, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup 
from aiogram.filters.callback_data import CallbackData
import datetime


from keyboards.reply_kb import (
    contact_keyboard,
    get_aim_keyboard,
    get_experience_keyboard,
    get_team_keyboard,
    get_date_keyboard,
    get_style_keyboard,
    get_final_decision_keyboard
)

import aiosqlite
from pathlib import Path
from keyboards.inline_kb import get_time_keyboard
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback 
from utilits.codes.google_calendar import authenticate_google_calendar, create_calendar_event, is_time_available, find_nearest_available_day, get_events_for_date, WORK_SLOT_EVENT_NAME


router = Router()

DB_NAME = "CAPSOUL.db"


class Form(StatesGroup): # –∏—Å–ø–æ–ª—å—É–µ—Ç—Å—è –∫–∞–∫ –±—É—Ñ—Ñ–µ—Ä –¥–ª—è —Ä–µ—à–µ–Ω–∏–π
    aim = State()
    experience = State()
    team = State()
    date = State()
    style = State()
    show_solutions = State()  
    final_decision = State()  
    select_date = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    select_time = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.from_user.full_name
    username = message.from_user.username
    username = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"

    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT id, phone FROM users WHERE id = ?", (user_id,))
        user = await cursor.fetchone()

        if not user:
            await db.execute("""
                INSERT OR IGNORE INTO users (id, name, user_name, phone)
                VALUES (?, ?, ?, ?)""", (user_id, name, username, ""))
            await db.commit()

        if not user or not user[1]:
            await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∞–ø—Å—É–ª–∞, —è –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–∑ —Å—Ç—É–¥–∏–∏ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤ Capsoul.\n\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–µ–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n–û–±–µ—â–∞–µ–º - —Å–ø–∞–º–∞ –Ω–µ –±—É–¥–µ—Ç",
                reply_markup=await contact_keyboard()
            )
        else:
            await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=ReplyKeyboardRemove()
            )


@router.message(F.content_type == types.ContentType.CONTACT)
async def get_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    user_id = message.from_user.id
    phone = contact.phone_number

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            UPDATE users SET phone = ? WHERE id = ?""", (phone, user_id))
        await db.commit()

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—É.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.aim)
    await message.answer(
        "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞?",
        reply_markup=get_aim_keyboard()
    )


@router.message(Form.aim)
async def process_aim(message: types.Message, state: FSMContext):
    aim = message.text
    await state.update_data(aim=aim)

    if aim == "–î–ª—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è":
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∏–∑–∞–π–Ω –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ —Å—Ç–∏–ª—å, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å. –ú—ã –ø–æ–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
        )
    else:
        await message.answer(
            "–ó–¥–æ—Ä–æ–≤–æ! –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∂–∏–∑–Ω–∏ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –¥–æ–º –∏–¥–µ–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å."
        )

    await state.set_state(Form.experience)
    await message.answer(
        "–£ –≤–∞—Å —É–∂–µ –±—ã–ª –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º?",
        reply_markup=get_experience_keyboard()
    )


@router.message(Form.experience)
async def process_experience(message: types.Message, state: FSMContext):
    experience = message.text
    await state.update_data(experience=experience)

    if experience == "–î–∞, –±—ã–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç":
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–¢–æ–≥–¥–∞ –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –≤–∞–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–µ–≤–∑–æ–π—Ç–∏ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è."
        )
    elif experience == "–î–∞, –Ω–æ –æ–ø—ã—Ç –±—ã–ª –Ω–µ—É–¥–∞—á–Ω—ã–º":
        await message.answer(
            "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –±—ã–≤–∞–µ—Ç. –ú—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë, —á—Ç–æ–±—ã –≤–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ—à—ë–ª –≥–ª–∞–¥–∫–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞–ª."
        )
    else:
        await message.answer(
            "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –º—ã –±—É–¥–µ–º —Ä—è–¥–æ–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ, —á—Ç–æ–±—ã –≤—Å—ë –ø—Ä–æ—à–ª–æ –ª–µ–≥–∫–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ."
        )

    await state.set_state(Form.team)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–º–æ–Ω—Ç?",
        reply_markup=get_team_keyboard()
    )


@router.message(Form.team)
async def process_team(message: types.Message, state: FSMContext):
    team = message.text
    await state.update_data(team=team)

    if team == "–î–∞, –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞":
        await message.answer(
            "–≠—Ç–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ! –°–ª–∞–∂–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚Äî —ç—Ç–æ —É–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Å–ø–µ—Ö–∞. –ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!"
        )
    elif team == "–ù–µ—Ç, –ø–æ–∫–∞ –∏—â—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤":
        await message.answer(
            "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º."
        )
    else:
        await message.answer(
            "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–∞!"
        )

    await state.set_state(Form.date)
    await message.answer(
        "–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–º–æ–Ω—Ç—É?",
        reply_markup=get_date_keyboard()
    )


@router.message(Form.date)
async def process_date(message: types.Message, state: FSMContext):
    date = message.text
    await state.update_data(date=date)

    await message.answer(
        "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ! –£—á—Ç–µ–º —ç—Ç–æ. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Å–∞–º—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏."
    )

    minimalism_photo = FSInputFile("utilits/images/minimalism.png")
    modern_classic_photo = FSInputFile("utilits/images/modern_classic.jpg")
    scandi_photo = FSInputFile("utilits/images/s—Åandi.jpg")

    await message.answer_photo(
        photo=minimalism_photo,
        caption="üé® –ú–∏–Ω–∏–º–∞–ª–∏–∑–º ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –ø—Ä–æ—Å—Ç–æ—Ç—É, –ø–æ—Ä—è–¥–æ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."
    )

    await message.answer_photo(
        photo=modern_classic_photo,
        caption="‚ú® –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å, —É—é—Ç –∏ –≤–µ—á–Ω—É—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å."
    )

    await message.answer_photo(
        photo=scandi_photo,
        caption="ü™µ –°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–µ—Ç–ª–æ–µ, —Ç—ë–ø–ª–æ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."
    )

    await state.set_state(Form.style)
    await message.answer(
        "–ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å—Ç–∏–ª—å –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞–ø—Å—É–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–ª–∏–∂–µ:",
        reply_markup=get_style_keyboard()
    )


@router.message(Form.style)
async def process_style(message: types.Message, state: FSMContext):
    style = message.text
    await state.update_data(style=style)

    data = await state.get_data()
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            UPDATE users SET
                aim_of_project = ?,
                past_experience = ?,
                team_exist = ?,
                date_of_project = ?,
                design_preferences = ?
            WHERE id = ?""",
            (data['aim'], data['experience'], data['team'], data['date'], data['style'], user_id)
        )
        await db.commit()

    images_path = Path("utilits/images")
    style_images = {
        "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º": ["example_minimalism1.jpg", "example_minimalism2.jpg", "example_minimalism3.jpg"],
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞": ["example_modern_classic1.jpg", "example_modern_classic2.jpg", "example_modern_classic3.jpg"],
        "–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å": ["example_scandi1.jpg", "example_scandi2.jpg", "example_scandi3.jpg"]
    }
    descriptions = {
        "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º": "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º ‚Äî —ç—Ç–æ —Å—Ç–∏–ª—å –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –ø–æ—Ä—è–¥–æ–∫, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —á–∏—Å—Ç–æ—Ç—É –ª–∏–Ω–∏–π –∏ —Å–≤–æ–±–æ–¥—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –∫–æ–º—Ñ–æ—Ä—Ç –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω. –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ç–æ —Ü–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ, –≥–¥–µ –º–Ω–æ–≥–æ –ª–∏—à–Ω–∏—Ö –≤–µ—â–µ–π, —à—É–º–∞ –∏ —Å—É–µ—Ç—ã.",
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ ‚Äî —ç—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —É—é—Ç–∞, –º—è–≥–∫–æ—Å—Ç–∏ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –ò–Ω—Ç–µ—Ä—å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–∏–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–≤—Ç—Ä–∞.",
        "–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å": "–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ—Å—Ç–æ—Ç—É. –í —Ç–∞–∫–æ–º –¥–æ–º–µ —Ç–µ–ø–ª–æ –∏ –ª–µ–≥–∫–æ –¥—ã—à–∏—Ç—Å—è."
    }

    media = [InputMediaPhoto(media=FSInputFile(images_path / image_name)) for image_name in style_images[style]]
    await message.answer_media_group(media=media)

    await message.answer(descriptions[style])

    await message.answer(
        "–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö?",
        reply_markup=get_final_decision_keyboard()
    )
    await state.set_state(Form.final_decision)


@router.message(Form.final_decision)
async def final_decision(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = message.from_user.full_name

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å
    service = authenticate_google_calendar()
    nearest_day = find_nearest_available_day(service)
    if nearest_day:
        nearest_day_formatted = datetime.datetime.strptime(nearest_day, "%Y-%m-%d").strftime("%d.%m.%Y")
        await message.answer(
            f"{name}, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—à—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É –∏ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å, –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º.\n"
            f"–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 20 –º–∏–Ω—É—Ç –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! üòä\n\n"
            f"–ë–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å: {nearest_day_formatted}.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–∏–∑–∞–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    await state.set_state(Form.select_date)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()
    )

@router.callback_query(SimpleCalendarCallback.filter(), Form.select_date)
async def process_calendar(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    selected, date = await SimpleCalendar(locale="ru_RU").process_selection(callback_query, callback_data)
    if selected:
        now = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=7)))  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ
        if date.date() < now.date() or (date.date() == now.date() and date.time() < now.time()):
            await callback_query.message.answer(
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.",
                reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–Ω–æ–≤–∞
            )
            return

        await state.update_data(meeting_date=date.strftime("%Y-%m-%d"))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–±–æ—á–∏–µ —Å–ª–æ—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        service = authenticate_google_calendar()
        events = get_events_for_date(service, date.strftime("%Y-%m-%d"))
        has_work_slots = any(event["summary"] == WORK_SLOT_EVENT_NAME for event in events)

        if not has_work_slots:
            await callback_query.message.answer(
                "–í –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –¥–∏–∑–∞–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
                reply_markup=await SimpleCalendar(locale="ru_RU").start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–Ω–æ–≤–∞
            )
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(Form.select_time)
        await callback_query.message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
            reply_markup=get_time_keyboard(date.strftime("%Y-%m-%d"))
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(Form.select_time, F.data.startswith("time_"))
async def process_time(callback_query: CallbackQuery, state: FSMContext):
    time = callback_query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
    await state.update_data(meeting_time=time)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è

    data = await state.get_data()
    user_id = callback_query.from_user.id
    meeting_date = data['meeting_date']
    meeting_datetime = f"{meeting_date}T{time}:00+07:00"  # –§–æ—Ä–º–∞—Ç –¥–ª—è Google Calendar (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT phone, aim_of_project, past_experience, team_exist, date_of_project, design_preferences FROM users WHERE id = ?", (user_id,))
        user_data_db = await cursor.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    user_data = {
        "name": callback_query.from_user.full_name,
        "phone": user_data_db[0] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω",
        "aim_of_project": user_data_db[1] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "past_experience": user_data_db[2] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "team_exist": user_data_db[3] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "date_of_project": user_data_db[4] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "design_preferences": user_data_db[5] if user_data_db else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            UPDATE users SET meeting_date = ? WHERE id = ?""",
            (meeting_datetime, user_id)
        )
        await db.commit()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
    service = authenticate_google_calendar()
    create_calendar_event(service, user_data, meeting_datetime)

    await callback_query.message.answer(
        f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ {meeting_date} –≤ {time}.\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()