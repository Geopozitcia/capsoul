import os
import asyncio
import re
from aiogram.enums import ParseMode
from aiogram import Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.types import InputMediaPhoto
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, get_user_locale
import sqlite3 as sq
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from core.keyboards.inline import show_basket_inline, basket_inl
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import Request


class basketstate(StatesGroup):
    basket_quantity=State()
    delivery_date=State()


########### –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
async def add_to_basket(call: CallbackQuery, state: FSMContext):
    product_id = call.data.split('_')[1]
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("SELECT * FROM basket WHERE user_id=? AND product_id=?", (user_id, product_id))
        existing_item = cur.fetchone()

        if existing_item:
            cur.execute("UPDATE basket SET quantity = quantity + 1 WHERE user_id=? AND product_id=?", (user_id, product_id))
        else:
            cur.execute("INSERT INTO basket (user_id, product_id, quantity) VALUES (?, ?, ?)", (user_id, product_id, 1))

        con.commit()

    show_basket_inline = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data="show_basket")]]
    )

    message = await call.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=show_basket_inline)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
    await state.update_data(add_to_basket_message_id=message.message_id)
    await call.answer()

async def process_quantity(message: Message, state: FSMContext):
    quantity = message.text
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=ReplyKeyboardRemove())
        return

    data = await state.get_data()
    product_id = data.get("product_id")
    user_id = message.from_user.id

    try:
        with sq.connect('PINCODE.db') as con:
            cur = con.cursor()
            cur.execute(
                "INSERT INTO basket (user_id, product_id, quantity) VALUES (?, ?, ?)",
                (user_id, product_id, int(quantity))
            )
            con.commit()

        # –û—Ç 6 —Ñ–µ–≤—Ä–∞—è–ª 
        await state.clear()

        # –û—Ç 6 —Ñ–µ–≤—Ä–∞–ª—è
        show_basket_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data="show_basket")]
        ])
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", reply_markup=show_basket_keyboard)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
#############


############ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

class basket_in(StatesGroup):
    basket = State()

def convert_price(price_str):
    if not price_str:
        return 0.0

    cleaned_price = re.sub(r'[^\d,\.]', '', price_str).replace(',', '.')

    try:
        return float(cleaned_price)
    except ValueError:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã: {price_str} -> {cleaned_price}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return 0.0
    
async def check_basket_validity(call: CallbackQuery, state: FSMContext): # –¥–ª—è –±–∞–≥—Ñ–∏–∫—Å–∞
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("SELECT product_id FROM basket WHERE user_id=?", (user_id,))
        basket_items = cur.fetchall()

        invalid_items = []
        for (product_id,) in basket_items:
            cur.execute("SELECT id FROM tovari WHERE id=?", (product_id,))
            if not cur.fetchone():
                invalid_items.append(product_id)

        if invalid_items:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            for product_id in invalid_items:
                cur.execute("DELETE FROM basket WHERE user_id=? AND product_id=?", (user_id, product_id))
            con.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —É–±—Ä–∞–Ω—ã –∏–∑ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑."
            )

            return False  
        return True  

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
async def show_basket_item(call: CallbackQuery, state: FSMContext, index: int = 0):
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("SELECT * FROM basket WHERE user_id=?", (user_id,))
        basket_items = cur.fetchall()

        if not basket_items:
            await call.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        invalid_items = await check_basket_validity(user_id)
        if invalid_items:
            warning_message = "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
            for item in invalid_items:
                warning_message += f"‚ùå {item}\n"
            warning_message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É."
            await call.message.answer(warning_message)
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        data = await state.get_data()
        add_to_basket_message_id = data.get("add_to_basket_message_id")

        if add_to_basket_message_id:
            try:
                await call.bot.delete_message(chat_id=call.message.chat.id, message_id=add_to_basket_message_id)
                await state.update_data(add_to_basket_message_id=None)  # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        item = basket_items[index]
        product_id = item[2]
        quantity = item[3]
        total_items = len(basket_items)

        await state.set_state(basket_in.basket)

        cur.execute("SELECT * FROM tovari WHERE id=?", (product_id,))
        product = cur.fetchone()

        if not product:
            await call.message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        price_str = product[8]  
        price = convert_price(price_str)
        item_total = price * quantity

        try:
            photo_path = f"images/{product_id}.jpg"
            caption = (f"<b>{product[1]}</b>\n"
                       f"<i>–û–ø–∏—Å–∞–Ω–∏–µ</i>: {product[2]}\n\n"
                       f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                       f"üìå –¢–æ–≤–∞—Ä {index + 1} –∏–∑ {total_items}")
            
            data = await state.get_data()
            photo_message_id = data.get("photo_message_id")
            basket_message_id = data.get("basket_message_id")

            if photo_message_id:
                media = InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=caption,
                    parse_mode="HTML"
                )
                await call.bot.edit_message_media(
                    chat_id=call.message.chat.id,
                    message_id=photo_message_id,
                    media=media,
                    reply_markup=basket_inl(index, product_id, total_items),
                )
            else:
                photo_message = await call.message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=caption,
                    reply_markup=basket_inl(index, product_id, total_items),
                    parse_mode="HTML"
                )
                await state.update_data(photo_message_id=photo_message.message_id)

        except Exception as e:
            pass

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ—Ä–∑–∏–Ω–µ
        basket_summary = "üõí <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</b>\n\n"
        total_price = 0

        for item in basket_items:
            product_id = item[2]
            quantity = item[3]

            cur.execute("SELECT * FROM tovari WHERE id=?", (product_id,))
            product = cur.fetchone()

            if not product:
                continue

            price_str = product[8]
            price = convert_price(price_str)
            item_total = price * quantity
            total_price += item_total

            basket_summary += f"‚Ä¢ {product[1]} - {quantity} —à—Ç.\n"

        basket_summary += f"\nüí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price:.2f} ‚ÇΩ"

        if basket_message_id:
            await call.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=basket_message_id,
                text=basket_summary,
                parse_mode="HTML"
            )
        else:
            basket_message = await call.message.answer(basket_summary, parse_mode="HTML")
            await state.update_data(basket_message_id=basket_message.message_id)

        await state.update_data(current_index=index, basket_items=basket_items)

############## –î–∞–ª–µ–µ –∏ –ù–∞–∑–∞–¥


async def next_item(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    basket_items = data.get("basket_items", [])

    next_index = current_index + 1

    if next_index >= len(basket_items):
        next_index = 0

    await state.update_data(current_index=next_index)
    await show_basket_item(call, state, next_index)
    await call.answer()

async def previous_item(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    basket_items = data.get("basket_items", [])
    previous_index = current_index - 1

    if previous_index < 0:
        previous_index = len(basket_items) - 1

    await state.update_data(current_index=previous_index)
    await show_basket_item(call, state, previous_index)
    await call.answer()
########

############# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ

async def remove_from_basket(call: CallbackQuery, state: FSMContext):
    product_id = call.data.split('_')[1]
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("DELETE FROM basket WHERE user_id=? AND product_id=?", (user_id, product_id))
        con.commit()
        cur.execute("SELECT * FROM basket WHERE user_id=?", (user_id,))
        basket_items = cur.fetchall()

    if basket_items:
        await state.update_data(basket_items=basket_items, current_index=0)
        await show_basket_item(call, state, index=0)
    else:
        data = await state.get_data()
        photo_message_id = data.get("photo_message_id")
        basket_message_id = data.get("basket_message_id")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if photo_message_id:
            await call.bot.delete_message(chat_id=call.message.chat.id, message_id=photo_message_id)
        if basket_message_id:
            await call.bot.delete_message(chat_id=call.message.chat.id, message_id=basket_message_id)

        # –û—Ç 6 —Ñ–µ–≤—Ä–∞–ª—è
        await state.clear()

        await call.answer()
        await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

async def increase_quantity(call: CallbackQuery, state: FSMContext):
    product_id = call.data.split('_')[1]
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("UPDATE basket SET quantity = quantity + 1 WHERE user_id=? AND product_id=?", (user_id, product_id))
        con.commit()

    data = await state.get_data()
    current_index = data.get("current_index", 0)
    
    await show_basket_item(call, state, current_index)
    await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 1")

async def decrease_quantity(call: CallbackQuery, state: FSMContext):
    product_id = call.data.split('_')[1]
    user_id = call.from_user.id

    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("SELECT quantity FROM basket WHERE user_id=? AND product_id=?", (user_id, product_id))
        row = cur.fetchone()

        if row is None:
            await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
            return
        
        current_quantity = row[0]

        if current_quantity > 1:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
            cur.execute("UPDATE basket SET quantity = quantity - 1 WHERE user_id=? AND product_id=?", (user_id, product_id))
            con.commit()
            data = await state.get_data()
            current_index = data.get("current_index", 0)
            await show_basket_item(call, state, current_index)
            await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 1")
        else:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await remove_from_basket(call, state)

from core.keyboards.replykeyboard import kb, start_kb



class BasketState(StatesGroup): # —Å—Ç–∞–¥–∏–∏
    delivery_date = State()
    delivery_time = State()

async def checkout(call: CallbackQuery, state: FSMContext):
    is_valid = await check_basket_validity(call, state)
    if not is_valid:
        return  
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                              reply_markup=await SimpleCalendar(locale='ru_RU.utf8').start_calendar())
    await state.set_state(BasketState.delivery_date)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await call.answer()


async def show_delivery_time_keyboard(callback_query, state): # —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    time_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å 9 –¥–æ 12", callback_data="time_9_12")],
        [InlineKeyboardButton(text="—Å 14 –¥–æ 18", callback_data="time_14_18")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    ])
    
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=time_keyboard
    )
    await state.set_state(BasketState.delivery_time)


async def process_delivery_date(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    is_valid = await check_basket_validity(callback_query, state)
    if not is_valid:
        return  

    selected, date = await SimpleCalendar(locale='ru_RU.utf8').process_selection(callback_query, callback_data)
    if selected:
        if date > datetime.now() + timedelta(days=90):
            await callback_query.message.answer(
                "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 90 –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=await SimpleCalendar(locale='ru_RU.utf8').start_calendar()
            )
            return
        elif date <= datetime.now():
            await callback_query.message.answer(
                "–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∏–ª–∏ –ø–æ–∑–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=await SimpleCalendar(locale='ru_RU.utf8').start_calendar()
            )
            return
        
        await callback_query.message.delete()

        delivery_date = date.strftime("%d.%m.%Y")
        await state.update_data(delivery_date=delivery_date)
        await show_delivery_time_keyboard(callback_query, state)

async def process_delivery_time(callback_query: CallbackQuery, state: FSMContext):
    is_valid = await check_basket_validity(callback_query, state)
    if not is_valid:
        return  

    time_choice = None
    if callback_query.data == "time_9_12":
        time_choice = "—Å 9 –¥–æ 12"
    elif callback_query.data == "time_14_18":
        time_choice = "—Å 14 –¥–æ 18"
    
    delivery_date = await state.get_data()
    delivery_date = delivery_date.get('delivery_date')
    full_delivery_info = f"{delivery_date} {time_choice}"
    user_id = callback_query.from_user.id
    
    with sq.connect('PINCODE.db') as con:
        cur = con.cursor()
        cur.execute("SELECT id_zakaza FROM zakazi")
        ids = cur.fetchall()
        new_id = max([int(id[0]) for id in ids]) + 1 if ids else 1

        cur.execute("SELECT * FROM basket WHERE user_id=?", (user_id,))
        basket_items = cur.fetchall()
        for item in basket_items:
            product_id, quantity = item[2], item[3]
            cur.execute("SELECT id_prodavca FROM tovari WHERE id=?", (product_id,))
            seller_id = cur.fetchone()
            seller_id = seller_id[0] if seller_id else None

            cur.execute("""
                INSERT INTO zakazi (id_zakaza, order_by, tovar, order_to, kol, date, zakorpred) 
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (new_id, user_id, product_id, seller_id, quantity, full_delivery_info, "–∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–æ—Ä–∑–∏–Ω—É"))

        cur.execute("DELETE FROM basket WHERE user_id=?", (user_id,))
        con.commit()
        cur.execute("SELECT * FROM zakazi")
        zakazi_data = cur.fetchall()
        formatted_data = [list(row) for row in zakazi_data]
        send_to_google_sheets(formatted_data)

    main_menu_button = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mainmenu")]
    ])
    await callback_query.answer()
    await callback_query.message.answer(
        f'–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {full_delivery_info}, –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û–Ω —É–∂–µ —É –Ω–∞—Å, –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω. –°–ø–∞—Å–∏–±–æ!',
        reply_markup=main_menu_button
    )
    await state.clear()



async def cancel_order(callback_query: CallbackQuery, state: FSMContext): # —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    await state.clear()

    main_menu_button = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mainmenu")] 
    ])

    await callback_query.message.answer(
        "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=main_menu_button
    )

    ######################## —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ google shits
def connect_to_google_sheets():
    scope = ['https://www.googleapis.com/auth/spreadsheets']
    credentials = Credentials.from_service_account_file('cred.json', scopes=scope)  # credentials with scopes
    client = gspread.authorize(credentials)
    sheet = client.open_by_url('https://docs.google.com/spreadsheets/d/15AVrAsZVs1ic0JsNqBJuzC1FQvU9pIKXANBZ9iXxYy0').worksheet("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã")
    return sheet

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
def send_to_google_sheets(data):
    sheet = connect_to_google_sheets()
    sheet.append_rows(data, value_input_option='RAW')  


